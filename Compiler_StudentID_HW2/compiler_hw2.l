/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include "string.h"

extern YYSTYPE yylval; //YYSTYPE
extern int currentScope;
char buf[256];
char strbuf[256];
int dumpFlagWithScope = 0;

extern void dump_symbol(int scope);
extern void yyerror(char *s);
extern int errorFlag;
extern char errorMsg[256];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, 256 - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return '+'; }
"-" 	{ CONCAT; return '-'; }
"*" 	{ CONCAT; return '*'; }
"/" 	{ CONCAT; return '/'; }
"%"     { CONCAT; return '%'; }
"++"    { CONCAT; return INC_OP; }
"--"    { CONCAT; return DEC_OP; }

 /* Relational */
">"		{ CONCAT; return '>'; }
"<"		{ CONCAT; return '<'; }
">="	{ CONCAT; return GE_OP; }
"<="	{ CONCAT; return LE_OP; }
"=="	{ CONCAT; return EQ_OP; }
"!="	{ CONCAT; return NE_OP; }

 /* Assignment */
"="		{ CONCAT; return '='; }
"+="	{ CONCAT; return ADD_ASSIGN; }
"-="	{ CONCAT; return SUB_ASSIGN; }
"*="	{ CONCAT; return MUL_ASSIGN; }
"/="	{ CONCAT; return DIV_ASSIGN; }
"%="	{ CONCAT; return MOD_ASSIGN; }

 /* Logical */
"&&"	{ CONCAT; return AND_OP; }
"||"	{ CONCAT; return OR_OP; }
"!"		{ CONCAT; return '!'; }

 /* Delimiters */
"("		{ CONCAT; return '('; }
")"		{ CONCAT; return ')'; }
"{"		{ CONCAT; ++currentScope; return '{'; }
"}"		{ CONCAT; dumpFlagWithScope = currentScope; --currentScope; return '}'; }
"["		{ CONCAT; return '['; }
"]"		{ CONCAT; return ']'; }
","		{ CONCAT; return ','; }

 /* Print Keywords */
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; yylval.string = strdup(yytext); return VOID; }
"int"		{ CONCAT; yylval.string = strdup(yytext); return INT; }
"float"  	{ CONCAT; yylval.string = strdup(yytext); return FLOAT; }
"string"  	{ CONCAT; yylval.string = strdup(yytext); return STRING; }
"bool"  	{ CONCAT; yylval.string = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; yylval.boolean = 1; return TRUE; }
"false"     { CONCAT; yylval.boolean = 0; return FALSE; }

"return"    { CONCAT; return RETURN; }

 /* String Constant */
\"				        {
    BEGIN STRING_STATE;
    CONCAT;
    memset(strbuf, 0, sizeof(strbuf));
    strcpy(strbuf, yytext);
}
<STRING_STATE>\"		{
    BEGIN INITIAL;
    CONCAT;
    strcat(strbuf, yytext);
    yylval.string = strdup(strbuf);
    return STRING_LITERAL;
}
<STRING_STATE>[^"]*		{ CONCAT; strcat(strbuf, yytext); }

 /* Number Constant */
{integer}	{ CONCAT; yylval.i_val = atoi(yytext); return I_CONST; }
{float}	    { CONCAT; yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; CONCAT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{
    printf("%d: %s\n", yylineno, buf);
    memset(buf, 0, sizeof(buf));
}
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ BEGIN INITIAL; CONCAT; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
 {id}       { CONCAT; yylval.string = strdup(yytext); return ID; }

 /* others */

[;]         { CONCAT; return ';'; }
[\n]        {
    if(strlen(buf) != 0){
        printf("%d: %s\n", yylineno, buf);
        if(errorFlag > 0){
            yyerror(errorMsg);
            errorFlag = 0;
        }
        if(dumpFlagWithScope > 0){
            dump_symbol(dumpFlagWithScope);
            dumpFlagWithScope = 0;
        }
    }
    else{
        printf("%d:\n", yylineno);
    }
    memset(buf, 0, sizeof(buf));
}
[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */
<<eof>>     { dump_symbol(0); dump_symbol(1); printf("\nTotal lines: %d \n", yylineno); return 0; }

%%

int yywrap()
{
    return 1;
}

